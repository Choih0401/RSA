from Crypto.Util.number import *

def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
        gcd = b
    return gcd, x, y

def main():
    q = 2076478388690715447644222392295584753007140199740835763821170999934221864895193172716587341806099928941239417181782165665806324184552950128351328886814107
    p = 11820547749265118607908336189140061659994883367758644383099900753008997316272341754974105712436833864387373302687964986221522289414610698068230842231006759
    e = 65537
    ct = 15175007508230661949213125841853820919948368859221761481847700530363990883761097704372435675552656459480039957857925187102590466676354015036181849182155680399350099015532296504916485091012255771133872737687990897080899160898509685794777509104691093814282101492973637294053730555124794841034604131492169339102
    n = p * q

    #print("n : " + str(n))

    phi = (p - 1) * (q - 1)

    gcd, a, b = egcd(e, phi)
    if(a < 0):
        d = a + phi
    else:
        d = a

    #print( "d: " + str(d) )

    pt = pow(ct,d,n)
    pt = pt
    print( "pt: " + ('%x'%pt).decode('hex'))

if __name__ == "__main__":
    main()
